"""
This type stub file was generated by pyright.
"""

from .dom_tag import dom_tag

'''
Utility classes for creating dynamic html documents
'''
__license__ = ...
def include(f): # -> text:
  '''
  includes the contents of a file on disk.
  takes a filename
  '''
  ...

def system(cmd, data=...): # -> str:
  '''
  pipes the output of a program
  '''
  ...

def escape(data, quote=...):
  '''
  Escapes special characters into their html entities
  Replace special characters "&", "<" and ">" to HTML-safe sequences.
  If the optional flag quote is true, the quotation mark character (")
  is also translated.

  This is used to escape content that appears in the body of an HTML document
  '''
  ...

_unescape = ...
str_escape = ...
def unescape(data): # -> str:
  '''
  unescapes html entities. the opposite of escape.
  '''
  ...

_reserved = ...
_replace_map = ...
def url_escape(data): # -> str:
  ...

def url_unescape(data): # -> str:
  ...

class lazy(dom_tag):
  '''
  delays function execution until rendered
  '''
  def __new__(_cls, *args, **kwargs): # -> Any:
    '''
    Need to reset this special method or else
    dom_tag will think it's being used as a dectorator.

    This means lazy() can't be used as a dectorator, but
    thinking about when you might want that just confuses me.
    '''
    ...
  
  def __init__(self, func, *args, **kwargs) -> None:
    ...
  


class text(dom_tag):
  '''
  Just a string. useful for inside context managers
  '''
  is_pretty = ...
  is_inline = ...
  def __init__(self, _text, escape=...) -> None:
    ...
  


def raw(s): # -> text:
  '''
  Inserts a raw string into the DOM. Unsafe.
  '''
  ...

